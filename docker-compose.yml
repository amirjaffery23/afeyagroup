# version: "3.8"

services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: stock_db
    ports:
      - "5432:5432"
    volumes:
      - stock_data:/var/lib/postgresql/data
      - ./database/docker-entrypoint-initdb.d/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
    networks:
      - app_network

  backend:
    build:
      context: ./backend
    container_name: backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:80"
    environment:
      VITE_BACKEND_URL: http://backend:8000
    depends_on:
      - backend
    networks:
      - app_network

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9092:9092"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  websockets_server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: websockets_server
    environment:
      - RUN_WEBSOCKETS=true
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: ["uvicorn", "websockets_server:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]
    ports:
      - "8080:8001"
    depends_on:
      kafka:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network

  finnhub_producer:
    build:
      context: ./backend
    container_name: finnhub_producer
    volumes:
      - ./backend/app:/app
    environment:
      - RUN_FINNHUB_PRODUCER=true
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: ["python", "/app/microservices/finnhub_service/finnhub_producer.py"]
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app_network

  polygon_stocks_api:
    build:
      context: ./backend
    container_name: polygon_stocks_api
    volumes:
      - ./backend/app:/app
    environment:
      - RUN_POLYGON_API=true
      - POLYGON_API_KEY=${POLYGON_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: ["python", "/app/microservices/polygon_stocks_service/polygon_stocks_api.py"]
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8088:8080"
    networks:
      - app_network

  polygon_flatfiles_service:
    build:
      context: ./backend
    container_name: polygon_flatfiles_service
    volumes:
      - ./backend/app:/app/app
    environment:
      - RUN_POLYGON_FLATFILES=true
      - POLYGON_ACCESS_KEY_ID=${POLYGON_ACCESS_KEY_ID}
      - POLYGON_SECRET_ACCESS_KEY=${POLYGON_SECRET_ACCESS_KEY}
      - POLYGON_S3_ENDPOINT=https://files.polygon.io
      - POLYGON_BUCKET_NAME=flatfiles
    command: [
      "uvicorn",
      "app.microservices.polygon_flatfiles_service.polygon_flatfiles:app",
      "--host", "0.0.0.0",
      "--port", "8002",
      "--reload"
    ]
    depends_on:
      - kafka
    ports:
      - "8089:8002"
    networks:
      - app_network


volumes:
  stock_data:
  kafka-data:

networks:
  app_network:
    name: app_network
    driver: bridge

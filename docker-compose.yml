#version: "3.8"

services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: stock_db
    ports:
      - "5432:5432"
    volumes:
      - stock_data:/var/lib/postgresql/data
      - ./database/docker-entrypoint-initdb.d/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network  # Fixed: Added network connection

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network

  backend:
    build:
      context: ./backend
    container_name: backend
    env_file:
      - .env  # Single source of truth for environment variables
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:80"
    environment:
      VITE_BACKEND_URL: http://localhost:8000  # Fixed: Accessible from browser
    depends_on:
      - backend
    networks:
      - app_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # ðŸ”¥ Add this line
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5
      start_period: 20s
    ports:
      - "9092:9092"
    networks:
      - app_network

  websockets_server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: websockets_server
    environment:
      - RUN_WEBSOCKETS=true  # âœ… This tells the container to run WebSockets
    command: ["uvicorn", "websockets_server:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]  # Fixed: Underscore & port
    ports:
      - "8080:8001"  # Fixed: No port conflict
    depends_on:
      kafka:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
  
  finnhub_producer:
    build:
      context: ./backend
    container_name: finnhub_producer
    environment:
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: ["python", "finnhub_producer.py"]
    depends_on:
      - kafka
    networks:
      - app_network

volumes:
  stock_data:

networks:
  app_network:
    name: app_network  # âœ… Forces Docker to use this name instead of afeyagroup_app_network
    driver: bridge